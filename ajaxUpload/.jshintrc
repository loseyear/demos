{
/* *************************************************************************** *
* 强制选项
* *************************************************************************** */

    "undef"                 : true,                         // 所有使用的变量都必须已定义
    "unused"                : true,                         // 所有定义的变量都必须被使用
    "predef"                : ["MY_GLOBAL"],                // 这些变量已定义，检查时不用检测其是否已定义
    "bitwise"               : true,                         // 禁用位运算符，
    "curly"                 : true,                         // 循环或者条件语句必须使用花括号包围
    "eqeqeq"                : true,                         // 强制使用三等号
    "es3"                   : false,                        // 兼容低级浏览器 IE 6/7/8/9
    "es5"                   : false,                         // 首先遵循 ECMAScript 5.1
    "esnext"                : true,                         // 使用 ECMAScript 6 的特定语法
    "freeze"                : true,                         // 禁止重写原生对象的原型，比如 Array，Date
    "indent"                : true,                         // 代码缩进
    "latedef"               : "nofunc",                     // 禁止定义之前使用变量，忽略 function 函数声明
    "newcap"                : true,                         // 构造器函数首字母大写
    "noarg"                 : true,                         // 禁止使用 arguments.caller 和 arguments.callee，未来会被弃用， ECMAScript 5 禁止使用 arguments.callee
    "quotmark"              : true,                         // 为 true 时，禁止单引号和双引号混用
    "strict"                : true,                         // 严格模式
    "maxparams"             : 4,                            // 最多参数个数
    "maxdepth"              : 4,                            // 最大嵌套深度
    "maxcomplexity"         : true,                         // 复杂度检测
    "maxlen"                : 600,                          // 最大行数


/* ******************************************* *** **************************** *
* 宽松选项
* ******************************************** *** *************************** */

    "asi"                   : true,                         // 控制“缺少分号”的警告
    "boss"                  : true,
    // 很霸气的选项，如果为真，那么JSHint会允许在if，for，while里面编写赋值语句。
    // 一般来说，我们会在循环、判断等语句中加入值的比较来做语句的运行条件，
    // 时候会把 == 错写成赋值的 =，通常，JSHint会把这个认定为一个错误，
    // 但是开启这个选项的化，JSHint就不会检查判断条件中的赋值 ，你是boss，你说的算:)。

    "debug"                 : true,                         // 忽略 debugger
    "evil"                  : true,                         // 控制 eval 使用警告
    "lastsemic"             : true,                         // 检查一行代码最后声明后面的分号是否遗漏
    "laxcomma"              : true,                         // 检查不安全的折行，忽略逗号在最前面的编程风格
    "loopfunc"              : true,                         // 检查循环内嵌套 function
    "multistr"              : true,                         // 检查多行字符串
    "notypeof"              : true,                         // 检查无效的 typeof 操作符值
    "sub"                   : true,                         // person['name'] vs. person.name
    "supernew"              : true,                         // new function () { ... } 和 new Object
    "validthis"             : true,                         // 在非构造器函数中使用 this

/* ******************************************* *** **************************** *
* 环境
* ******************************************** *** *************************** */
    "browser"               : true,                         // 预定义全局变量 document，navigator，FileReader 等
    "devel"                 : true,                         // 定义用于调试的全局变量：console，alert
    "jquery"                : true,                         // 定义全局变量
    "node"                  : true,                         // 定义全局变量

/* ******************************************* *** **************************** *
* 补充
* ******************************************** *** *************************** */

    "laxbreak"              : true,                        // 如果为真，JSHint则不会检查换行
    "regexp"                : false,                       // 如果为真，JSHint会不允许使用.和[^…]的正则
    "immed"                 : false,                       // 如果为真，JSHint要求匿名函数的调用如下： (function(){}()); 而不是 (function(){})();
    "eqnull"                : false,                       // 如果为真，JSHint会允许使用”== null”作比较。== null 通常用来判断一个变量是undefined或者是null（当时用==，null和undefined都会转化为false）。
    "forin"                 : true,                        // 如果为真，那么，JSHint允许在for in 循环里面不出现hasOwnProperty，
    // for in循环一般用来遍历一个对象的属性，这其中也包括他继承自原型链的属性，而hasOwnProperty可以来判断一个属性是否是对象本身的属性而不是继承得来的。
    "maxerr"                : 7,                           // 设定错误的阈值，超过这个阈值jshint不再向下检查，提示错误太多。
    "noempty"               : false,
    // 如果为真，JSHint会禁止出现空的代码块（没有语句的代码块）。
    // 如果为真，JSHint会禁用构造器，以避免一些问题。
    // 在JSLint中会主动禁用构造器的方式以避免一些潜在问题，但其实很多构造器的使用并非有害，例如如下的调用
    // new JsUIWindow();
    // 注意这个调用是没有把构造器的结果赋值给变量的
    // 因此，我们需要使用构造器的时候可以禁用这个选项。
    "nomen"                 : false,                       // 如果为真，JSHint会禁用下划线的变量名。
    "onevar"                : true,                        // 如果为真，JSHint期望函数只被var的形式声明一遍。
    "passfail"              : false,                       // 如果为真，JSHint会在发现首个错误后停止检查。
    "plusplus"              : false,                       // 如果为真，JSHint会禁用自增运算和自减运算 ++ 和 – 可能会带来一些代码的阅读上的困惑。
    "white"                 : true,                        // 如果为true，JSHint会依据严格的空白规范检查你的代码
    "expr"                  : false,                       // 如果为true 禁用表达式
    "proto"                 : true                         // 此选项禁止有关__proto__属性警告。
}

